{"ast":null,"code":"import _classCallCheck from \"/home/hunter/github/backupbox/BoxProject/drone-parts-planner/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hunter/github/backupbox/BoxProject/drone-parts-planner/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/hunter/github/backupbox/BoxProject/drone-parts-planner/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/hunter/github/backupbox/BoxProject/drone-parts-planner/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/hunter/github/backupbox/BoxProject/drone-parts-planner/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/hunter/github/backupbox/BoxProject/drone-parts-planner/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport Node from './Node.js';\n\nvar TempNode = /*#__PURE__*/function (_Node) {\n  _inherits(TempNode, _Node);\n\n  var _super = _createSuper(TempNode);\n\n  function TempNode(type) {\n    _classCallCheck(this, TempNode);\n\n    return _super.call(this, type);\n  }\n\n  _createClass(TempNode, [{\n    key: \"build\",\n    value: function build(builder, output) {\n      var type = builder.getVectorType(this.getNodeType(builder, output));\n      var nodeData = builder.getDataFromNode(this);\n\n      if (builder.context.temp !== false && type !== 'void ' && output !== 'void' && nodeData.dependenciesCount > 1) {\n        if (nodeData.snippet === undefined) {\n          var snippet = _get(_getPrototypeOf(TempNode.prototype), \"build\", this).call(this, builder, type);\n\n          var nodeVar = builder.getVarFromNode(this, type);\n          var propertyName = builder.getPropertyName(nodeVar);\n          builder.addFlowCode(\"\".concat(propertyName, \" = \").concat(snippet));\n          nodeData.snippet = snippet;\n          nodeData.propertyName = propertyName;\n        }\n\n        return builder.format(nodeData.propertyName, type, output);\n      }\n\n      return _get(_getPrototypeOf(TempNode.prototype), \"build\", this).call(this, builder, output);\n    }\n  }]);\n\n  return TempNode;\n}(Node);\n\nexport default TempNode;","map":{"version":3,"sources":["/home/hunter/github/backupbox/BoxProject/drone-parts-planner/node_modules/three-stdlib/nodes/core/TempNode.js"],"names":["Node","TempNode","type","builder","output","getVectorType","getNodeType","nodeData","getDataFromNode","context","temp","dependenciesCount","snippet","undefined","nodeVar","getVarFromNode","propertyName","getPropertyName","addFlowCode","format"],"mappings":";;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;;IAEMC,Q;;;;;AACJ,oBAAYC,IAAZ,EAAkB;AAAA;;AAAA,6BACVA,IADU;AAEjB;;;;WAED,eAAMC,OAAN,EAAeC,MAAf,EAAuB;AACrB,UAAMF,IAAI,GAAGC,OAAO,CAACE,aAAR,CAAsB,KAAKC,WAAL,CAAiBH,OAAjB,EAA0BC,MAA1B,CAAtB,CAAb;AACA,UAAMG,QAAQ,GAAGJ,OAAO,CAACK,eAAR,CAAwB,IAAxB,CAAjB;;AAEA,UAAIL,OAAO,CAACM,OAAR,CAAgBC,IAAhB,KAAyB,KAAzB,IAAkCR,IAAI,KAAK,OAA3C,IAAsDE,MAAM,KAAK,MAAjE,IAA2EG,QAAQ,CAACI,iBAAT,GAA6B,CAA5G,EAA+G;AAC7G,YAAIJ,QAAQ,CAACK,OAAT,KAAqBC,SAAzB,EAAoC;AAClC,cAAMD,OAAO,uEAAeT,OAAf,EAAwBD,IAAxB,CAAb;;AACA,cAAMY,OAAO,GAAGX,OAAO,CAACY,cAAR,CAAuB,IAAvB,EAA6Bb,IAA7B,CAAhB;AACA,cAAMc,YAAY,GAAGb,OAAO,CAACc,eAAR,CAAwBH,OAAxB,CAArB;AACAX,UAAAA,OAAO,CAACe,WAAR,WAAuBF,YAAvB,gBAAyCJ,OAAzC;AACAL,UAAAA,QAAQ,CAACK,OAAT,GAAmBA,OAAnB;AACAL,UAAAA,QAAQ,CAACS,YAAT,GAAwBA,YAAxB;AACD;;AAED,eAAOb,OAAO,CAACgB,MAAR,CAAeZ,QAAQ,CAACS,YAAxB,EAAsCd,IAAtC,EAA4CE,MAA5C,CAAP;AACD;;AAED,iFAAmBD,OAAnB,EAA4BC,MAA5B;AACD;;;;EAvBoBJ,I;;AA2BvB,eAAeC,QAAf","sourcesContent":["import Node from './Node.js';\n\nclass TempNode extends Node {\n  constructor(type) {\n    super(type);\n  }\n\n  build(builder, output) {\n    const type = builder.getVectorType(this.getNodeType(builder, output));\n    const nodeData = builder.getDataFromNode(this);\n\n    if (builder.context.temp !== false && type !== 'void ' && output !== 'void' && nodeData.dependenciesCount > 1) {\n      if (nodeData.snippet === undefined) {\n        const snippet = super.build(builder, type);\n        const nodeVar = builder.getVarFromNode(this, type);\n        const propertyName = builder.getPropertyName(nodeVar);\n        builder.addFlowCode(`${propertyName} = ${snippet}`);\n        nodeData.snippet = snippet;\n        nodeData.propertyName = propertyName;\n      }\n\n      return builder.format(nodeData.propertyName, type, output);\n    }\n\n    return super.build(builder, output);\n  }\n\n}\n\nexport default TempNode;\n"]},"metadata":{},"sourceType":"module"}