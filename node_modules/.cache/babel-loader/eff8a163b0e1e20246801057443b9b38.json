{"ast":null,"code":"var _jsxFileName = \"/home/hunter/github/drone-parts-planner/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { Canvas } from '@react-three/fiber';\nimport './Model.js';\nimport Model from './Model.js';\nimport { useGLTF, Environment, Stage, OrbitControls } from '@react-three/drei';\nimport { Suspense } from 'react';\nimport { Html } from '@react-three/drei';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Car(props) {\n  _s();\n\n  const {\n    scene,\n    nodes,\n    materials\n  } = useGLTF('/lambo.glb'); // A layout effect executes after the jsx has \"rendered\" but before it is committed to screen by the host (threejs)\n  // This is a good place to make adjustments\n\n  useLayoutEffect(() => {\n    scene.traverse(obj => obj.type === 'Mesh' && (obj.receiveShadow = obj.castShadow = true));\n    Object.assign(nodes.wheel003_020_2_Chrome_0.material, {\n      metalness: 1,\n      roughness: 0.4,\n      color: new THREE.Color('black')\n    }); // Using the emissive colors is a nice trick to give textures a warm sheen\n\n    Object.assign(materials.WhiteCar, {\n      roughness: 0,\n      metalness: 0.25,\n      emissive: new THREE.Color('#500000'),\n      envMapIntensity: 0.5\n    });\n  }, [scene, nodes, materials]); // <primitive> just puts an existing thing into the scene graph\n  // For more control over the asset refer to https://github.com/pmndrs/gltfjsx\n\n  return /*#__PURE__*/_jsxDEV(\"primitive\", {\n    object: scene,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Car, \"t5D+OkHxjCayTmYgDzY6xMVsTs4=\", false, function () {\n  return [useGLTF];\n});\n\n_c = Car;\n\nconst Scen = () => {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    dpr: [1, 2],\n    shadows: true,\n    camera: {\n      fov: 45\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"color\", {\n      attach: \"background\",\n      args: ['#101010']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"fog\", {\n      attach: \"fog\",\n      args: ['#101010', 10, 50]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: null,\n      children: [/*#__PURE__*/_jsxDEV(Environment, {\n        path: \"/cube\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Stage, {\n        environment: null,\n        intensity: 1,\n        contactShadowOpacity: 1,\n        shadowBias: -0.0015,\n        children: /*#__PURE__*/_jsxDEV(Model, {\n          scale: 0.01\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      \"rotation-x\": -Math.PI / 2,\n      scale: 100,\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        color: \"#101010\",\n        transparent: true,\n        depthWrite: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n      autoRotate: true,\n      enableZoom: false,\n      enablePan: false,\n      minPolarAngle: Math.PI / 2.8,\n      maxPolarAngle: Math.PI / 2.8\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Scen;\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Scene, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 10\n  }, this);\n};\n\n_c3 = App;\n\nrequire('react-dom');\n\nwindow.React2 = require('react');\nconsole.log(window.React1 === window.React2);\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Car\");\n$RefreshReg$(_c2, \"Scen\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/home/hunter/github/drone-parts-planner/src/App.js"],"names":["Canvas","Model","useGLTF","Environment","Stage","OrbitControls","Suspense","Html","Car","props","scene","nodes","materials","useLayoutEffect","traverse","obj","type","receiveShadow","castShadow","Object","assign","wheel003_020_2_Chrome_0","material","metalness","roughness","color","THREE","Color","WhiteCar","emissive","envMapIntensity","Scen","fov","Math","PI","App","require","window","React2","console","log","React1"],"mappings":"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","sourcesContent":["import './App.css';\nimport {Canvas} from '@react-three/fiber'\nimport './Model.js'\nimport Model from './Model.js';\nimport { useGLTF, Environment, Stage, OrbitControls } from '@react-three/drei'\nimport { Suspense } from 'react'\nimport { Html } from '@react-three/drei'\n\nfunction Car(props) {\n  const { scene, nodes, materials } = useGLTF('/lambo.glb')\n  // A layout effect executes after the jsx has \"rendered\" but before it is committed to screen by the host (threejs)\n  // This is a good place to make adjustments\n  useLayoutEffect(() => {\n    scene.traverse((obj) => obj.type === 'Mesh' && (obj.receiveShadow = obj.castShadow = true))\n    Object.assign(nodes.wheel003_020_2_Chrome_0.material, { metalness: 1, roughness: 0.4, color: new THREE.Color('black') })\n    // Using the emissive colors is a nice trick to give textures a warm sheen\n    Object.assign(materials.WhiteCar, { roughness: 0, metalness: 0.25, emissive: new THREE.Color('#500000'), envMapIntensity: 0.5 })\n  }, [scene, nodes, materials])\n  // <primitive> just puts an existing thing into the scene graph\n  // For more control over the asset refer to https://github.com/pmndrs/gltfjsx\n  return <primitive object={scene} {...props} />\n}\n\nconst Scen = () => {\n  return(\n    <Canvas dpr={[1, 2]} shadows camera={{ fov: 45 }}>\n    <color attach=\"background\" args={['#101010']} />\n    <fog attach=\"fog\" args={['#101010', 10, 50]} />\n    <Suspense fallback={null}>\n      <Environment path=\"/cube\" />\n      {/* <Stage> will center and light the contents, create ground-shadows, and zoom the camera */}\n      <Stage environment={null} intensity={1} contactShadowOpacity={1} shadowBias={-0.0015}>\n        <Model scale={0.01} />\n      </Stage>\n    </Suspense>\n    <mesh rotation-x={-Math.PI / 2} scale={100}>\n      <planeGeometry />\n      <meshStandardMaterial color=\"#101010\" transparent depthWrite={false} />\n    </mesh>\n    <OrbitControls autoRotate enableZoom={false} enablePan={false} minPolarAngle={Math.PI / 2.8} maxPolarAngle={Math.PI / 2.8} />\n  </Canvas>\n  );\n}\n\nconst App = () => {\n  return <Scene />;\n};\nrequire('react-dom');\nwindow.React2 = require('react');\nconsole.log(window.React1 === window.React2);\nexport default App;\n"]},"metadata":{},"sourceType":"module"}